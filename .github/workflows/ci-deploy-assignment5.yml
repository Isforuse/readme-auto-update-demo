name: CI/CD Deployment Assignment5

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # === 1Ô∏è‚É£ Build Job ===
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [22]
    outputs:
      VERSION: ${{ steps.semver.outputs.VERSION }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Build project
        run: |
          echo "üèóÔ∏è Building project for Node.js ${{ matrix.node }}..."
          mkdir -p dist
          echo "dummy output" > dist/output.txt
          zip -r build-${{ matrix.node }}.zip dist/

      - uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build-${{ matrix.node }}.zip

      - name: Determine next semantic version
        id: semver
        run: echo "VERSION=v1.0.$GITHUB_RUN_NUMBER" >> $GITHUB_OUTPUT

  # === 2Ô∏è‚É£ Unit Test Job ===
  test-unit:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: ./artifact

      - name: Unzip artifact
        run: unzip ./artifact/build-22.zip -d ./artifact

      - name: Run unit tests
        run: |
          echo "üß™ Running unit tests in UNIT..."
          if [ -f "./artifact/dist/output.txt" ]; then
            echo "‚úÖ Unit test passed."
          else
            echo "‚ùå Unit test failed."
            exit 1
          fi

  # === 3Ô∏è‚É£ Integration Test Job ===
  test-integration:
    runs-on: ubuntu-latest
    needs: test-unit
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: ./artifact

      - name: Unzip artifact
        run: unzip ./artifact/build-22.zip -d ./artifact

      - name: Run integration tests
        run: |
          echo "üß™ Running integration tests..."
          if grep -q "dummy output" ./artifact/dist/output.txt; then
            echo "‚úÖ Integration test passed."
          else
            echo "‚ùå Integration test failed."
            exit 1
          fi


  # === 4Ô∏è‚É£ Deploy to Staging ===
  deploy-staging:
    runs-on: ubuntu-latest
    needs: test-integration
    environment: staging
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact-22
          path: .

      - name: Unzip build
        run: unzip build.zip -d dist

      - name: Release Staging Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: staging-${{ needs.build.outputs.VERSION }}
        run: |
          echo "üöÄ Deploying to STAGING..."
          gh release delete "$TAG" -y || true
          git tag -d "$TAG" || true
          gh release create "$TAG" dist/output.txt --notes "Staging release ${TAG}"

  # === 5Ô∏è‚É£ Deploy to Production ===
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production   # ‚ö†Ô∏è Âú® repo Ë£°Ë®≠ÂÆö Reviewer ‰øùË≠∑
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact-22
          path: .

      - name: Unzip build
        run: unzip build.zip -d dist

      - name: Release Production Build
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: prod-${{ needs.deploy-staging.outputs.VERSION }}
        run: |
          echo "üèÅ Deploying to PRODUCTION..."
          gh release delete "$TAG" -y || true
          git tag -d "$TAG" || true
          if gh release create "$TAG" dist/output.txt --notes "Production release ${TAG}"; then
            echo "‚úÖ Production release created."
          else
            echo "‚ùå Release failed, rollback triggered."
            exit 1
          fi

      - name: Comment on GitHub Issue
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          issue_number=$(gh issue list --search "Production Deployment Notifications in:title" --json number --jq '.[0].number')
          if [ -z "$issue_number" ]; then
            issue_url=$(gh issue create --title "Production Deployment Notifications" --body "Tracking all production releases.")
            issue_number=$(echo "$issue_url" | grep -oE '[0-9]+$')
          fi
          gh issue comment $issue_number --body "‚úÖ Production release (${TAG}) deployed at $(date)."

      - name: Rollback on failure
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: prod-${{ needs.deploy-staging.outputs.VERSION }}
        run: |
          echo "‚ö†Ô∏è Rollback: removing release $TAG"
          gh release delete "$TAG" -y || true
          git tag -d "$TAG" || true
