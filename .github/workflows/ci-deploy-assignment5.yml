name: CI/CD Deployment Assignment5

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # === 1Ô∏è‚É£ Build Job (Â§öÁâàÊú¨ + Ë™ûÊÑèÂåñÁâàÊú¨Ëôü) ===
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [16, 18, 20, 22]
    outputs:
      VERSION: ${{ steps.semver.outputs.VERSION }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      # ËºïÈáèÊ™¢Êü•
      - name: Lightweight validation
        run: |
          if [ -f "README.md" ]; then
            echo "‚úÖ README.md found"
          else
            echo "‚ùå README.md missing" && exit 1
          fi

      - name: Build project
        run: |
          echo "üèóÔ∏è Building project for Node.js ${{ matrix.node }}..."
          mkdir -p dist
          echo "dummy output for Node.js ${{ matrix.node }}" > dist/output.txt
          zip -r build-${{ matrix.node }}.zip dist/

      - uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ matrix.node }}
          path: build-${{ matrix.node }}.zip

      # Ë™ûÊÑèÂåñÁâàÊú¨ (Âè™Âú® Node 22 Âü∑Ë°å)
      - name: Determine next semantic version
        if: matrix.node == '22'
        id: semver
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "")
          last_commit=$(git log -1 --pretty=%B)

          if [[ "$last_commit" == *"#major"* ]]; then
            level="major"
          elif [[ "$last_commit" == *"#minor"* ]]; then
            level="minor"
          else
            level="patch"
          fi

          major=$(echo "$latest" | grep -oE '[0-9]+' | head -1 || echo 0)
          minor=$(echo "$latest" | grep -oE '[0-9]+' | head -2 | tail -1 || echo 0)
          patch=$(echo "$latest" | grep -oE '[0-9]+' | tail -1 || echo 0)

          if [[ "$level" == "major" ]]; then
            major=$((major+1)); minor=0; patch=0
          elif [[ "$level" == "minor" ]]; then
            minor=$((minor+1)); patch=0
          else
            patch=$((patch+1))
          fi

          next="v$major.$minor.$patch"
          echo "VERSION=$next" >> $GITHUB_OUTPUT

  # === 2Ô∏è‚É£ Unit Test Job ===
  test-unit:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact-22
          path: ./artifact

      - run: unzip ./artifact/build-22.zip -d ./artifact

      - name: Run unit tests
        run: |
          if [ -f "./artifact/dist/output.txt" ]; then
            echo "‚úÖ Unit test passed"
          else
            echo "‚ùå Unit test failed" && exit 1
          fi

  # === 3Ô∏è‚É£ Integration Test Job ===
  test-integration:
    runs-on: ubuntu-latest
    needs: test-unit
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact-22
          path: ./artifact

      - run: unzip ./artifact/build-22.zip -d ./artifact

      - name: Run integration tests
        run: |
          if grep -q "dummy output" ./artifact/dist/output.txt; then
            echo "‚úÖ Integration test passed"
          else
            echo "‚ùå Integration test failed" && exit 1
          fi

  # === 4Ô∏è‚É£ Deploy to Staging ===
  deploy-staging:
    runs-on: ubuntu-latest
    needs: test-integration
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: build-artifact-22
          path: ./artifact

      - run: unzip ./artifact/build-22.zip -d ./artifact

      - name: Release Staging Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.build.outputs.VERSION }}
        run: |
          echo "üöÄ Deploying to STAGING..."
          TAG="staging-${VERSION}"
          echo "Using tag: $TAG"
          gh release delete "$TAG" -y || true
          git tag -d "$TAG" || true
          gh release create "$TAG" ./artifact/dist/output.txt --notes "Staging release $TAG"


  # === 5Ô∏è‚É£ Deploy to Production ===
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production   # ‚ö†Ô∏è ÈúÄË¶Å reviewer Ê†∏ÂáÜ
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: build-artifact-22
          path: ./artifact

      - run: unzip ./artifact/build-22.zip -d ./artifact

      - name: Release Production Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.build.outputs.VERSION }}
        run: |
          echo "üèÅ Deploying to PRODUCTION..."
          TAG="prod-${VERSION}"
          echo "Using tag: $TAG"
          gh release delete "$TAG" -y || true
          git tag -d "$TAG" || true
          if gh release create "$TAG" ./artifact/dist/output.txt --notes "Production release $TAG"; then
            echo "‚úÖ Production release created"
          else
            echo "‚ùå Release failed, rollback triggered" && exit 1
          fi
