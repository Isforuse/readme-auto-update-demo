name: Build-Test-Release Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # === 1️⃣ Build Job ===
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies..."
          npm install || echo "⚠️ No package.json found, skipping npm install."

      - name: Build the software
        run: |
          echo "🏗️ Building project..."
          npm run build || (mkdir -p dist && echo "dummy output" > dist/output.txt)

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist/

  # === 2️⃣ Unit Test Job ===
  test-unit:
    runs-on: ubuntu-latest
    needs: build
    env:
      TEST_ENV: unit
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Run unit tests
        run: |
          echo "🧪 Running unit tests in $TEST_ENV environment..."
          if [ -f "dist/output.txt" ]; then
            echo "✅ Unit test passed: build artifact exists."
          else
            echo "❌ Unit test failed: no build artifact found!"
            exit 1
          fi

  # === 3️⃣ Integration Test Job ===
  test-integration:
    runs-on: ubuntu-latest
    needs: test-unit
    env:
      TEST_ENV: integration
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Run integration tests
        run: |
          echo "🧪 Running integration tests in $TEST_ENV environment..."
          # 模擬一個測試條件（dist/output.txt 必須包含 'dummy output'）
          if grep -q "dummy output" dist/output.txt; then
            echo "✅ Integration test passed."
          else
            echo "❌ Integration test failed: expected content missing."
            exit 1
          fi

  # === 4️⃣ Deploy to Staging ===
  deploy-staging:
    runs-on: ubuntu-latest
    needs: test-integration
    environment: staging
    env:
      TEST_ENV: staging
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Release to staging
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🚀 Deploying to staging environment..."
          ts=$(date +%s)
          gh release create "staging-$ts" dist/output.txt --notes "Staging release after tests passed"

  # === 5️⃣ Deploy to Production ===
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production   # ⚠️ 在 GitHub repo settings 裡設定 reviewer approval
    env:
      TEST_ENV: production
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Release to production
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🏁 Deploying to PRODUCTION (requires approval)..."
          ts=$(date +%s)
          gh release create "prod-$ts" dist/output.txt --notes "Production release after staging approval"
