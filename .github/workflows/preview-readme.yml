name: Preview README changes

on:
  pull_request:        # 當有人開 PR 或更新 PR 時自動觸發
    branches:
      - main

jobs:
  preview:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate preview README (with rate-limit handling)
        uses: actions/github-script@v7
        env:
          MIN_REMAINING: '20'       # 低於多少剩餘配額就觸發等待
          MAX_RETRIES: '5'          # 最多重試次數
          BASE_BACKOFF_MS: '15000'  # 退避起始毫秒
          FORCE_BACKOFF: 'false'    # Demo 用：設成 'true' 可強制觸發退避
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            const START = '<!--START_SECTION:activity-->';
            const END   = '<!--END_SECTION:activity-->';
            const readme = fs.readFileSync('README.md', 'utf8');

            const MIN_REMAINING   = parseInt(process.env.MIN_REMAINING  || '20', 10);
            const MAX_RETRIES     = parseInt(process.env.MAX_RETRIES    || '5', 10);
            const BASE_BACKOFF_MS = parseInt(process.env.BASE_BACKOFF_MS|| '15000', 10);
            const FORCE_BACKOFF   = (process.env.FORCE_BACKOFF || 'false').toLowerCase() === 'true';

            async function sleep(ms) {
              return new Promise(r => setTimeout(r, ms));
            }

            async function ensureQuotaWithBackoff() {
              for (let attempt = 0; attempt <= MAX_RETRIES; attempt++) {
                if (FORCE_BACKOFF && attempt === 0) {
                  core.warning('FORCE_BACKOFF enabled. Sleeping 5s to demonstrate backoff...');
                  await sleep(5000);
                  return;
                }

                const rl = await github.request('GET /rate_limit');
                const remaining = rl.data.resources.core.remaining;
                const reset     = rl.data.resources.core.reset;
                const now       = Math.floor(Date.now()/1000);

                core.info(`Rate limit remaining=${remaining}, reset=${reset}`);

                if (remaining > MIN_REMAINING) return;

                const untilResetMs = Math.max((reset - now + 5) * 1000, 0);
                const backoffMs    = Math.min(120000, BASE_BACKOFF_MS * (2 ** attempt));
                const waitMs       = Math.min(untilResetMs, backoffMs);

                core.warning(`⚠️ Rate limit low (remaining=${remaining}). Sleeping ${Math.round(waitMs/1000)}s (attempt ${attempt + 1}/${MAX_RETRIES})...`);
                await sleep(waitMs);
              }
              throw new Error('Exceeded MAX_RETRIES due to low rate limit.');
            }

            await ensureQuotaWithBackoff();

            // 取得最近 5 筆事件
            const { data: events } = await github.request('GET /repos/{owner}/{repo}/events', {
              owner: context.repo.owner,
              repo:  context.repo.repo,
              per_page: 5
            });

            const lines = events.map(e =>
              `- ${e.type} by @${e.actor.login} on ${new Date(e.created_at).toISOString().slice(0,10)}`
            ).join('\n');

            const preview = readme.replace(
              new RegExp(`${START}[\\s\\S]*?${END}`, 'm'),
              `${START}\n${lines}\n${END}`
            );

            fs.writeFileSync('preview-README.md', preview);
            core.info('✅ preview-README.md generated with rate-limit handling.')

      - name: Upload preview artifact
        uses: actions/upload-artifact@v4
        with:
          name: preview-readme
          path: preview-README.md
