name: CI/CD Deployment Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # === 1Ô∏è‚É£ Build Job (Âê´Ëá™ÂãïÂåñÊ∏¨Ë©¶ËàáÁâàÊú¨ÈÅûÂ¢û) ===
  build:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.semver.outputs.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # üîπ Êñ∞Â¢ûËá™ÂãïÂåñÊ∏¨Ë©¶ / Linting Ê≠•È©ü
      - name: Run automated tests
        run: |
          echo "üß™ Running automated tests..."
          # ‰ª•‰∏ãÊ®°Êì¨Ê∏¨Ë©¶ÁµêÊûú (ÂèØ‰æùÂØ¶ÈöõÂ∞àÊ°àÊîπÊàê npm test / pytest / go test ...)
          echo "All tests passed successfully!"
          # Ëã•Ë¶ÅÊ®°Êì¨Ê∏¨Ë©¶Â§±ÊïóÔºåÂèØ‰ΩøÁî® exit 1 Ê∏¨Ë©¶ pipeline ‰∏≠Êñ∑ÊïàÊûú
          exit 1

      - name: Build project
        run: |
          echo "üèóÔ∏è Building project..."
          zip -r build.zip .

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

      - name: Determine next semantic version
        id: semver
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Checking latest release tag..."
          latest=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "")
          echo "Latest tag found: $latest"

          if [[ -z "$latest" ]]; then
            next=1
          else
            num=$(echo "$latest" | grep -oE '[0-9]+$' || echo "0")
            next=$((num + 1))
          fi

          echo "‚úÖ Next version number: v$next"
          echo "VERSION=$next" >> $GITHUB_OUTPUT

  # === 2Ô∏è‚É£ Deploy to Dev ===
  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      VERSION: ${{ needs.build.outputs.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Release Dev Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: dev-v${{ needs.build.outputs.VERSION }}
          NOTE: "Development build v${{ needs.build.outputs.VERSION }}"
        run: |
          echo "üöÄ Deploying development release..."
          gh release delete "$TAG" -y || true
          git tag -d "$TAG" || true
          gh release create "$TAG" build.zip --notes "$NOTE"

  # === 3Ô∏è‚É£ Deploy to Staging ===
  deploy-staging:
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment: staging
    outputs:
      VERSION: ${{ needs.deploy-dev.outputs.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Release Staging Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: staging-v${{ needs.deploy-dev.outputs.VERSION }}
          NOTE: "Staging release v${{ needs.deploy-dev.outputs.VERSION }} for testing"
        run: |
          echo "üß™ Deploying staging release..."
          gh release delete "$TAG" -y || true
          git tag -d "$TAG" || true
          gh release create "$TAG" build.zip --notes "$NOTE"

  # === 4Ô∏è‚É£ Deploy to Production ===
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Release Production Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: prod-v${{ needs.deploy-staging.outputs.VERSION }}
          NOTE: "Production release v${{ needs.deploy-staging.outputs.VERSION }}"
        run: |
          echo "üèÅ Deploying production release..."
          gh release delete "$TAG" -y || true
          git tag -d "$TAG" || true
          gh release create "$TAG" build.zip --notes "$NOTE"
