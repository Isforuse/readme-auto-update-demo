name: CI/CD Deployment Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # === 1️⃣ Build Job (含自動化測試與版本遞增) ===
  build:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.semver.outputs.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 🔹 輕量自動化測試（適用非 Node 專案）
      - name: Run automated tests (lightweight)
        id: test
        run: |
          echo "🧪 Running lightweight validation tests..."
          
          # 檢查 README.md 是否存在
          if [ -f "README.md" ]; then
            echo "✅ README.md found."
          else
            echo "❌ README.md missing!" && exit 1
          fi

          # 檢查 GitHub Action 定義檔是否存在
          if [ -f "action.yml" ]; then
            echo "✅ action.yml found."
          else
            echo "⚠️ action.yml not found (skipping Action validation)."
          fi

          echo "✅ Basic project validation passed." 
          
      # ✅ 將測試結果顯示於 Summary 區塊
      - name: Show summary result
        if: success()
        run: |
          echo "### ✅ Automated Tests Passed" >> $GITHUB_STEP_SUMMARY
          echo "- README.md found" >> $GITHUB_STEP_SUMMARY
          echo "- action.yml validated (or skipped)" >> $GITHUB_STEP_SUMMARY
          echo "- Project validation completed successfully." >> $GITHUB_STEP_SUMMARY

      - name: Build project
        run: |
          echo "🏗️ Building project..."
          zip -r build.zip .

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

      - name: Determine next semantic version
        id: semver
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Checking latest release tag..."
          latest=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "")
          echo "Latest tag found: $latest"

          if [[ -z "$latest" ]]; then
            next=1
          else
            num=$(echo "$latest" | grep -oE '[0-9]+$' || echo "0")
            next=$((num + 1))
          fi

          echo "✅ Next version number: v$next"
          echo "VERSION=$next" >> $GITHUB_OUTPUT


  # === 2️⃣ Deploy to Dev ===
  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      VERSION: ${{ needs.build.outputs.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 🔑 讀取 dev 環境機密
      - name: Show environment secrets
        run: |
          echo "🔧 Environment: Development"
          echo "API_KEY=[secure]" 
          echo "DEPLOY_TARGET=[secure]"

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Release Dev Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: dev-v${{ needs.build.outputs.VERSION }}
          NOTE: "Development build v${{ needs.build.outputs.VERSION }}"
          API_KEY: ${{ secrets.API_KEY }}
          DEPLOY_TARGET: ${{ secrets.DEPLOY_TARGET }}
        run: |
          echo "🚀 Deploying development release to $DEPLOY_TARGET ..."
          gh release delete "$TAG" -y || true
          git tag -d "$TAG" || true
          gh release create "$TAG" build.zip --notes "$NOTE"


  # === 3️⃣ Deploy to Staging ===
  deploy-staging:
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment: staging
    outputs:
      VERSION: ${{ needs.deploy-dev.outputs.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 🔑 讀取 staging 環境機密
      - name: Show environment secrets
        run: |
          echo "🔧 Environment: Staging"
          echo "API_KEY=[secure]" 
          echo "DEPLOY_TARGET=[secure]"

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Release Staging Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: staging-v${{ needs.deploy-dev.outputs.VERSION }}
          NOTE: "Staging release v${{ needs.deploy-dev.outputs.VERSION }} for testing"
          API_KEY: ${{ secrets.API_KEY }}
          DEPLOY_TARGET: ${{ secrets.DEPLOY_TARGET }}
        run: |
          echo "🧪 Deploying staging release to $DEPLOY_TARGET ..."
          gh release delete "$TAG" -y || true
          git tag -d "$TAG" || true
          gh release create "$TAG" build.zip --notes "$NOTE"


  # === 4️⃣ Deploy to Production ===
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      # 📦 檢出專案
      - name: Checkout repository
        uses: actions/checkout@v4

      # 📥 下載建置產物
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      # 🚀 正式版部署
      - name: Release Production Build
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: prod-v${{ needs.deploy-staging.outputs.VERSION }}
          NOTE: "Production release v${{ needs.deploy-staging.outputs.VERSION }}"
        run: |
          echo "🏁 Deploying production release..."
          gh release delete "$TAG" -y || true
          git tag -d "$TAG" || true

          # 嘗試建立正式版 release，若失敗則中斷觸發 rollback
          if gh release create "$TAG" build.zip --notes "$NOTE"; then
            echo "✅ Production release $TAG created successfully."
          else
            echo "❌ Release creation failed. Triggering rollback..."
            exit 1
          fi

      # 💬 自動建立或留言至 Issue
      - name: Create or comment on GitHub Issue
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "💬 Checking for existing deployment issue..."
          
          # 嘗試搜尋同標題的 issue
          issue_number=$(gh issue list --search "Production Deployment Notifications in:title" --json number --jq '.[0].number')
          
          # 若找不到則建立新的 issue 並擷取編號
          if [ -z "$issue_number" ]; then
            echo "🆕 No existing issue found. Creating one..."
            issue_url=$(gh issue create --title "Production Deployment Notifications" --body "This issue tracks all production release events.")
            issue_number=$(echo "$issue_url" | grep -oE '[0-9]+$')
            echo "🆕 Created new issue #$issue_number"
          else
            echo "✅ Found existing issue #$issue_number"
          fi
          
          # 留言通知
          gh issue comment $issue_number --body "✅ **Production release (prod-v${{ needs.deploy-staging.outputs.VERSION }})** successfully deployed at $(date)! 🎉"

          # 同步到 Summary 區塊
          echo "### 🚀 Production Release Successful" >> $GITHUB_STEP_SUMMARY
          echo "- Tag: prod-v${{ needs.deploy-staging.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: Production" >> $GITHUB_STEP_SUMMARY
          echo "- Issue: #$issue_number" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ✅ Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "- Time: $(date)" >> $GITHUB_STEP_SUMMARY

      # 🧹 Rollback step – 自動清理失敗部署
      - name: Rollback on failure
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: prod-v${{ needs.deploy-staging.outputs.VERSION }}
        run: |
          echo "⚠️ Deployment failed! Cleaning up release..."
          gh release delete "$TAG" -y || true
          git tag -d "$TAG" || true
          echo "🧹 Removed failed release $TAG due to deployment error."

          # 顯示於 Summary
          echo "### ⚠️ Rollback Executed" >> $GITHUB_STEP_SUMMARY
          echo "- Failed release $TAG has been deleted automatically." >> $GITHUB_STEP_SUMMARY
          echo "- Time: $(date)" >> $GITHUB_STEP_SUMMARY
